#!/usr/bin/ruby
require 'socket'
require 'logger'
include Process

puts "
█▀▀ ▄▀█ █░░ █ █░░ █▀ █▀▀ █▀█ █░█ █▀▀ █▀█
█▄█ █▀█ █▄▄ █ █▄▄ ▄█ ██▄ █▀▄ ▀▄▀ ██▄ █▀▄"

puts "w/ logging and fixes to locks"

class MultiLogger
	# Logging class to handle logging to two outputs
	def initialize(*targets)
		@targets = targets
	end

	%w(log debug info warn error fatal unknown).each do |m|
		define_method(m) do |*args|
			@targets.map { |t| t.send(m, *args) }
    end
  end
end

# Log to the console and to a file that changes daily
stdout_log = Logger.new(STDERR)
file_log = Logger.new('/home/primefocus/.mtnops/galilserver.log', 10, 5120000)
puts "Log file --> /home/primefocus/.mtnops/galilserver.log"
# levels: DEBUG, INFO, WARN, ERROR, FATAL, UNKNOWN
stdout_log.level = Logger::INFO
file_log.level = Logger::DEBUG
$log = MultiLogger.new(stdout_log, file_log)


#
#We use 'flock' to implement locking so multiple clients can talk to the
#galil over its single communication channel
#
$lockfile = "/tmp/galil.lock"
$statefile = "/home/primefocus/galil.state"

puts "\nLock file --> #{$lockfile}"
puts "State file --> #{$statefile}"
puts "Commands file --> /home/primefocus/90prime/galil/cmds.list"
puts "Filter file --> /home/primefocus/90prime/galil/filters.txt"

puts "\nStarting, please wait..."

sleep 2
#a global to keep track of forks with each fork incrementing it
$globalclientnum = 1
$moves = Hash.new
myclientnum = 0
#Galil state variables
#
#galil status variables
#a2d
$adbytes = Hash.new
$adbytes["a"] = 98
$adbytes["b"] = 154
$adbytes["c"] = 210
#move in progress
$mipbytes = Hash.new
$mipbytes["a"] = 45
$mipbytes["b"] = 73
$mipbytes["c"] = 101
$mipbytes["e"] = 157
$mipbytes["f"] = 185
$mipbytes["g"] = 213
$mipbytes["h"] = 241
$mip = 128

$adconv = 10.0 / 32767.0
#
#nominal plane array
$npla = Array.new
$npread = false

                                                                                
class Filter
	attr_reader :filtmagcode, :filtshortname, :filtcolor
	def initialize(filtstr)
		$log.debug("Entering function: #{__method__}")
		fsa = filtstr.split(' ')
		@filtmagcode = fsa[0].to_i
		@filtshortname = fsa[1]
		@filtcolor  = fsa[3]
		@filtercolor = Hash.new
		$log.debug("Exiting function: #{__method__}")
	end
end


class Galil
	def initialize(telescope, instrument, cmdfile, serverport, galiladdress, galilport)
	begin
		$log.debug("Entering function: #{__method__}")
		$log.info("Opening socket to galil")
		$galilsock = TCPSocket.new("10.30.3.31", galilport)
		$log.info("Starting command server")
		@serversock = TCPServer.new( "", serverport)	
		$log.info("Command server listening")
		rescue SystemCallError =>sce
		e = "#{sce}"
		if /e/.match("Connection refused") != nil
			$log.warn("Connection refused. Will sleep 10 seconds and retry connecting. The galil might need to be power cycled.")
			sleep 10
			retry
		end
			$stderr.print "System Call Error: " + $!
		raise
	end
		$cmds = Hash.new;
		rfile = File.new(cmdfile, "r")
		rfile.each_line do |cl|
		cc  = cl.split(':')	
		$cmds[cc[0]] = cc[1].chomp
		end
		$readlist = 0
		$log.debug("Exiting function: #{__method__}")
	end

	def showcmds
		$log.debug("Entering function: #{__method__}")
		$cmds.each_key {|key| puts "hlc: #{key} llc: #{$cmds[key]}"}
		$log.debug("Exiting function: #{__method__}")
	end

	def sendclient(mycn, clientsock, str)
		$log.debug("Entering function: #{__method__}")
		$log.debug("Sending to client: #{mycn}")
		clientsock.send(str, 0)
		$log.debug("Exiting function: #{__method__}")
	end

	def checkgalilstate(mycn)
		$log.debug("Entering function: #{__method__}")
		r = lsendgalil("DISTA=?;", mycn)
		if /OK:/.match(r) == nil
			$log.error("Cannot get intial DISTA")
		else
			d = r.split(":")
			$da = d[1].split(":", 2)
			$log.debug("Initial DISTA #{$da}")
		end
		r = lsendgalil("DISTB=?;", mycn)
		if /OK:/.match(r) == nil
			$log.error("Cannot get intial DISTB")
		else
			d = r.split(":")
			$da = d[1].split(":", 2)
			$log.debug("Initial DISTB #{$da}")
		end
		r = lsendgalil("DISTC=?;", mycn)
		if /OK:/.match(r) == nil
			$log.debug("Cannot get initial DISTC")
		else
			d = r.split(":")
			$da = d[1].split(":", 2)
			$log.debug("Initial DISTC #{$da}")
		end
		r = lsendgalil("FILTVAL=?;", mycn)
		if /OK:/.match(r) == nil
			$log.debug("Cannot get initial FILTVAL")
		else
			d = r.split(":")
			$fv = d[1].split(":", 2)
			$log.debug("Initial FILTVAL #{$fv}")
		end
		r = lsendgalil("REQFILT=?;", mycn)
		if /OK:/.match(r) == nil
			$log.debug("Cannot get initial REQFILT")
		else
			d = r.split(":")
			$rf = d[1].split(":", 2)
			$log.debug("Initial REQFILT #{$rf}")
		end
		$log.debug("Exiting function: #{__method__}")
	end

	
  def lsendgalil(cmd, mycn)
		$log.debug("Entering function: #{__method__}")
    lf = File.new($lockfile)
		#first get the lock
    while lf.flock(File::LOCK_EX | File:: LOCK_NB) == false
      $log.warn("galil locked")
      sleep 0.1
    end
		#now we have the lock
	  try = true
	  tn = 0
	  while try == true
			tn = tn + 1
			if tn > 20
				$log.error("Too many retries. Bailing out")
				#unset the lock
        lf.flock(File::LOCK_UN)
				$log.debug("Exiting function: #{__method__}")
				return "?: Too many retries. Bailing out"
			end
   	  $log.debug("client #{@myclientnum} sending to galil: #{cmd}")
      $log.debug("try: #{tn}")
      $galilsock.send(cmd, 0)
      retv = $galilsock.recv(272, 0)
			rlen = retv.length
			$log.debug("received length #{rlen}")
			if rlen >30
				$log.debug("errant buffer of size #{rlen}. Retrying")
				next
			end
      #puts "retv from galil: #{retv}"
      if /\?$/.match(retv) != nil
				$log.debug("in error branch")
				$galilsock.send("TC 1;", 0)
				$error = $galilsock.recv(100)
			 	$log.debug("Errorcode: #{$error}")
			elsif /:/.match(retv) != nil
				last = retv.length - 2
				rv = retv.slice(0, last)
				$log.debug("galil returns OK")
				try = false
				#unset the lock
				lf.flock(File::LOCK_UN)
				$log.debug("Exiting function: #{__method__}")
				return "OK: #{rv}"
			else
				$log.debug("Unknown error branch")
			end
		  sleep 0.1
		end

	end

	def runserver
		$log.debug("Entering function: #{__method__}")
		while true do
			$log.info("waiting for connections from clients")
			newsock = @serversock.accept
			if newsock == nil
				$log.debug("galilserver accept error")
				next
			end
			
			if (cpid = fork) == nil
				myclientnum = $globalclientnum
				$log.info("got connection from client #{myclientnum}")
				sleep 1
				sendclient(myclientnum, newsock, "OK: Connected to galilserver. Client #{myclientnum}")
				highlevelcmd = ""
				while highlevelcmd != "CLIENTDONE"
					$error = ""
					highlevelcmd = newsock.recv(100)
					$log.debug("got hlc: #{highlevelcmd}")
					h2lc = High2lowcmd.new(highlevelcmd, myclientnum)
					if $error.length != 0
						$log.debug("High-level command Error: #{$error}")
						sendclient(myclientnum, newsock, $error)
					else
						retv = h2lc.dolowlevel
						sendclient(myclientnum, newsock, retv)
					end
				end
				$log.debug("Client finished")
				newsock.close
				exit 0
			else
				$log.debug("This is the parent. Next client #{$globalclientnum}")
				$globalclientnum = $globalclientnum + 1
				newsock.close
			end
		end
		$log.debug("Exiting function: #{__method__}")
	end

	def shutdown
		$log.debug("Entering function: #{__method__}")
		$log.info("Closing socket to galil")
		$galilsock.close
		$log.info("Closing listening server socket")
		@serversock.close
		$log.debug("Exiting function: #{__method__}")
	end

end

class High2lowcmd
	def initialize(hlc, mycn)
		$log.debug("Entering function: #{__method__}")
		$error = ""
		@myclientnum = mycn
		@hlca = Array.new
		@hlca = hlc.split(' ')
		$log.debug("High level command: #{hlc}")
		k = @hlca[0]
		hl = @hlca.length
		(1...hl).each do |i|
			k = k + '_$' + i.to_s
		end
		if $cmds.has_key?(k) == false
			$error = "?: No such high-level command"
			$log.debug("Exiting function: #{__method__}")
			return "#{$error}"
		end
		llc = String.new($cmds[k])
		(1...hl).each do |i|
			p = '$' + i.to_s
			$log.debug("#{p}")
			llc.sub!(p, @hlca[i])
		end
		$log.debug("substituted #{llc}")
		@llca = Array.new
		@llca = llc.split(';')
		@llca.each do |cc|
			$log.debug("cc: #{cc}")
		end
		$log.debug("Exiting function: #{__method__}")
	end

	def dolowlevel
		$log.debug("Entering function: #{__method__}")
		$error = ""
		cnum = 1
		rrv = ""
		llcc = Lowlevelcmds.new(@myclientnum)
		mc = llcc.mycli
		$log.debug("Got a low-level cmd for client #{mc}")
		@llca.each do |c|
			$log.debug("cnum: #{cnum} doing method #{c}")
			cs = c.split('_')
			meth = cs.shift
			$log.debug("meth: #{meth}")
			x = "#{meth}".intern
			cs.push @myclientnum
			rv = llcc.send(x, cs)
			c = llcc.mycli
			$log.debug("Client is #{c}")
			rrv = rrv + rv
			cnum = cnum + 1
		end
		$log.debug("Exiting function: #{__method__}")
		return rrv
	end
end

class Lowlevelcmds
attr_reader :mycli

	def initialize(mycn)
		$log.debug("Entering function: #{__method__}")
		@mycli = mycn
		$log.debug("new LowLevel cmd for client #{mycn}")
		$log.debug("Exiting function: #{__method__}")
	end

  def sendgalil(cmd, mycn)
		$log.debug("Entering function: #{__method__}")
    lf = File.new($lockfile)
		#first get the lock
    while lf.flock(File::LOCK_EX | File:: LOCK_NB) == false
      $log.warn("galil locked")
      sleep 0.1
    end
		#now we have the lock
	  try = true
	  tn = 0
	  while try == true
			tn = tn + 1
			if tn > 20
				$log.debug("Too many retries. Bailing out")
				#unset the lock
        lf.flock(File::LOCK_UN)
				return "?: Too many retries. Bailing out"
			end
   	  $log.info("client #{mycn} sending to galil: #{cmd}")
      $log.debug("try: #{tn}")
      $galilsock.send(cmd, 0)
      retv = $galilsock.recv(272, 0)
			rlen = retv.length
			$log.debug("received length #{rlen}")
      $log.debug("retv from galil: #{retv}")
			if rlen > 30
				$log.debug("errant buffer of size #{rlen}. Retrying")
				next
			end
      if /\?$/.match(retv) != nil
      	$log.debug("in error branch")
        $galilsock.send("TC 1;", 0)
        $error = $galilsock.recv(100)
			 	$log.error("Errorcode: #{$error}")
      elsif /:/.match(retv) != nil
        last = retv.length - 2
        rv = retv.slice(0, last)
        $log.info("galil returns OK")
			 	try = false
				#unset the lock
      	lf.flock(File::LOCK_UN)
				$log.debug("Exiting function: #{__method__}")
        return "OK: #{rv}"
      else
				$log.debug("Unknown error branch")
      end
		  sleep 0.1
		end
	end

	def sendgalilreadn(cmd, n)
		$log.debug("Entering function: #{__method__}")
    lf = File.new($lockfile)
		#first get the lock
    while lf.flock(File::LOCK_EX | File:: LOCK_NB) == false
			$log.warn("galil locked")
			sleep 0.1
    end
		#now we have the lock
		try = true
		tn = 0
		while try == true
			tn = tn + 1
			if tn > 20
				$log.debug("Too many retries. Bailing out")
				lf.flock(File::LOCK_UN) # PATCH
				$log.debug("Exiting function: #{__method__}")
				return "?: Too many retries. Bailing out"
			end
			$log.debug("try #{tn}")
			$log.info("sending to galil #{cmd}")
			$galilsock.send(cmd, 0)
			retv = String.new
			retv = $galilsock.read(n)
			if /\?$/.match(retv) != nil
				$log.debug("in error branch")
				$galilsock.send("TC 1;", 0)
				$error = $galilsock.recv(100)
				$log.error("Errorcode: #{$error}")
			elsif /:$/.match(retv) != nil
				last = retv.length - 1
				$log.debug("in good branch")
       	rv = retv.slice(0, last)
				#unset the lock
        lf.flock(File::LOCK_UN)
				try = false
				$log.debug("last #{last}")
				$log.debug("Exiting function: #{__method__}")
       	return "OK: #{rv}"
      else
				$log.debug("unknown error")
				$log.debug("bad return value #{rv}")
			end
			sleep 0.1
		end
  end

	def setfilt(filtername)
	end

	def getgalilstatus(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		(1..10).each do |t|
                	$gstat = sendgalilreadn("QR;", 269)
	                gstatlength = $gstat.length
			$log.debug("stattry #{t}")
	                if gstatlength  != 272
       		                 $log.debug("length #{gstatlength} bad")
				t = t + 1
				next;
			else	
				$log.debug("status return OK")
				$log.debug("Exiting function: #{__method__}")
       			         return($gstat)
			end
		end
		$log.debug("Exiting function: #{__method__}")
        end

	def getmips(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
	        $mipbytes.each do |k, v|
       		         mb = $gstat[v, 1]
       		         mba = mb.unpack("b8")
       		         mbb = mb.unpack("C")
       		         mbbb = ((mbb[0] & $mip) != 0)?1:0
       		         $moves[k] = mbbb
       		         #$log.debug("moves: #{k} #{mba[0]} #{mbbb}")
 	       end
		$log.debug("Exiting function: #{__method__}")
	end

def  getaxisinfo(aa)
	$log.debug("Entering function: #{__method__}")
		a = aa[0]
		mycn = aa[1]
		cstr = "QR#{a};"
		astat = sendgalilreadn(cstr, 33)
		s = astat[4,28]
		sl = s.length
		$log.debug("sl #{sl}")
		astatarray = s.unpack("B16 B8 C l l l l l s s")
		# astatarray.each do |v|
		# 	$log.debug("v: #{v}")
		# end
		$log.debug("Exiting function: #{__method__}")
		return astatarray
	end

	
	def fwmoving(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		r = getaxisvelocity("F")
		if r == "OK:0"
			$log.debug("Exiting function: #{__method__}")
			return "OK: 0"
		else
			$log.debug("Exiting function: #{__method__}")
			return "OK: 1"
		end
	end

	def lfwmoving(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		cstr = "TV F;"
		$log.debug("sending #{cstr} to galil")
		r = sendgalil(cstr, mycn) 
			
		$log.debug("got velocity #{r}")
		$log.debug("Exiting function: #{__method__}")
		return "OK: 0"
	end

	def filtisin(c)
		$log.debug("Entering function: #{__method__}")
		mycn = c[0]
		ta = Array.new
		ta[0] = "FILTISIN"
		ta[1] = mycn
		r = read(ta)
		$log.debug("got filtin #{r}")
		$log.debug("Exiting function: #{__method__}")
		return r
	end


	def getclientnum(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		$log.debug("Exiting function: #{__method__}")
		return "OK: #{mycn}"
	end

	def read(ca)
		$log.debug("Entering function: #{__method__}")
		c = ca[0]
		cln = ca[1]
		cstr = "#{c}=?;"
		$log.debug("sending #{cstr} to galil")
		resp = sendgalil(cstr, cln)
		$log.debug("Exiting function: #{__method__}")
		return(resp)
	end

	def set(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[2]
		cstr = "#{ca[0]}=#{ca[1]};"
		$log.debug("sending #{cstr} to galil")
		resp = sendgalil(cstr, @myclientnum)
		$log.debug("Exiting function: #{__method__}")
		return(resp)
	end

	def sendraw(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[1]
		cstr = "#{ca[0]};"
		$log.debug("sending #{cstr} to galil")
		resp = sendgalil(cstr, @myclientnum)
		$log.debug("Exiting function: #{__method__}")
		return resp
	end

	def ex(ca)
		$log.debug("Entering function: #{__method__}")
		c = ca[0]
		mycn = ca[1]
		cstr = "XQ ##{c};"
		$log.debug("sending #{cstr} to galil")
		resp = sendgalil(cstr, mycn)
		$log.debug("Exiting function: #{__method__}")
		return(resp)
	end

	def zeropos(axislist)
		$log.debug("Entering function: #{__method__}")
		astr = "ABCDEFGH"
		cstr = "DP "
		(0..7).each do |i|
			a = astr[i, 1]
			$log.debug("#{a}")
			if axislist.index(a) != nil
				cstr = cstr + "0,"
			else
				cstr = cstr + ","
			end
		end
		cstr.chop!
		cstr = cstr + ";"
		$log.debug("sending #{cstr} to galil")
		resp = sendgalil(cstr, @myclientnum)
		$log.debug("Exiting function: #{__method__}")
		return resp
	end

		
	def focind(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		cstr = "XQ #FOCIND;"
		resp = sendgalil(cstr, mycn)
		$log.debug("Exiting function: #{__method__}")
		return resp
	end		

	def focall(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		cstr = "XQ #COORDMV;"
		resp = sendgalil(cstr, mycn)
		$log.debug("Exiting function: #{__method__}")
		return resp
	end		

	def filtin(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		cstr = "XQ #FILTIN,3;"
		resp = sendgalil(cstr, mycn)
		$log.debug("Exiting function: #{__method__}")
		return(resp)
	end

	def filtout(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		cstr = "XQ #FILTOUT;"
		resp = sendgalil(cstr, mycn)
		$log.debug("Exiting function: #{__method__}")
		return(resp)
	end

	def populate(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		cstr = "XQ #FILTLDM;"
		resp = sendgalil(cstr, mycn)
		$log.debug("Exiting function: #{__method__}")
		return(resp)
	end

	def popdone(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		cstr = "HX;"
		resp = sendgalil(cstr, mycn)
		$log.debug("Exiting function: #{__method__}")
		return(resp);
	end

	def filtmov(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		fin = Array.new
		fin[0] = mycn
		r = filtisin(fin)
		$log.debug("filtisin #{r}")
                if r.match("OK: 1") != nil
												$log.debug("Exiting function: #{__method__}")
                        return "?: Cannot rotate wheel with filter in"
		else
			cstr = "XQ #FILTMOV;"
			resp = sendgalil(cstr, mycn)
			ea = Array.new
			ea[0] = "ERRFILT"
			ea[1] = mycn
			erfilt = read(ea)
			if(erfilt == 1)
				$log.debug("Error finding requested filter")
				$log.debug("Exiting function: #{__method__}")
				return("?:")
			end
			$log.debug("Exiting function: #{__method__}")
			return "OK:"
		end
	end

	def sfiltmov(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		fin = Array.new
		fin[0] = mycn
		r = filtisin(fin)
		$log.debug("filtisin #{r}")
                if r.match("OK: 1") != nil
												$log.debug("Exiting function: #{__method__}")
                        return "?: Cannot rotate wheel with filter in"
		else
			cstr = "XQ #FILTMOV;"
			resp = sendgalil(cstr, mycn)
			ea = Array.new
			ea[0] = "ERRFILT"
			ea[1] = mycn
			erfilt = read(ea)
			if(erfilt == 1)
				$log.debug("Error finding requested filter")
				$log.debug("Exiting function: #{__method__}")
				return("?:")
			end
			$log.debug("Exiting function: #{__method__}")
			return "OK:"
		end
	end

	def getreqfilt(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		cstr = "REQFILT = ?;"
		r = sendgalil(cstr, mycn)
		if /OK:/.match(r) == nil
			$log.debug("Error getting requested filter")
			$log.debug("Exiting function: #{__method__}")
			return("?: Error getting requested filter")
		else
			d = r.split(":")
			$log.debug("Exiting function: #{__method__}")
			return "OK: #{d[1]}"
		end
	end

	def setreqfilt(codea)
		$log.debug("Entering function: #{__method__}")
		code = codea[0]
		mycn = codea[1]
		cstr = "REQFILT=#{code};"
		r = sendgalil(cstr, mycn)
		if /OK:/.match(r) == nil
			$log.debug("Error setting requested filter")
			$log.debug("Exiting function: #{__method__}")
			return "?: Error setting requested filter"
		else
			$log.debug("Exiting function: #{__method__}")
			return "OK: "
		end
	end

	def sloadfilt(codea)
		$log.debug("Entering function: #{__method__}")
		fn = codea[0]
		mycn = codea[1]
		if $filthash.has_key?(fn) == false
			$log.debug("no such filter in master list")
			$log.debug("Exiting function: #{__method__}")
			return "?"
		end
		code = $filthash[fn].to_i
		cstr = "REQFILT=#{code};"
		r = sendgalil(cstr, mycn)
		if /OK:/.match(r) == nil
			$log.debug("Error setting requested script filter")
			$log.debug("Exiting function: #{__method__}")
			return "?: Error setting requested filter"
		end
		ca = Array.new
		ca[0] = mycn
		checkfilt = filtisin(ca)
		$log.debug("checkfilt #{checkfilt}")
		if checkfilt != 0
			$log.debug("filter in beam")
		else
			$log.debug("Filter out. OK to move")
		end
		sfiltmov(ca)
		(1..50).each do |e|
			cstr = "REQFILT=?;"
			rr = sendgalil(cstr, ca[0])
			cstr = "FILTVAL=?;"
			fv = sendgalil(cstr, ca[0])
			rra = rr.split(":")
			fva = fv.split(":")
			rreq = rra[1].chomp!
			rval = fva[1].chomp!
			$log.debug("req #{rreq} val #{rval}")
			sleep 1
			if rreq == rval
				$log.debug("got filter")
				break
			end
		end
			filtin(ca)
		$log.debug("Exiting function: #{__method__}")
		return "OK: 0"
	end

	def sunloadfilt(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		filtout(ca)
		$log.debug("Exiting function: #{__method__}")
		return "OK: 0"
	end


	def getfiltval(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		cstr = "FILTVAL = ?;"
		r = sendgalil(cstr, mycn)
		if /OK:/.match(r) == nil
			$log.error("Error getting filtval")
			$log.debug("Exiting function: #{__method__}")
			return("?: Error getting filtval")
		else
			d = r.split(":")
			$log.debug("Exiting function: #{__method__}")
			return "OK: #{d[1]}.to_i"
		end
	end

	def initfw(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		ta = Array.new
		ta[0] = mycn
		r = filtisin(ta)
		$log.debug("filtisin #{r}")
		if /1/.match(r) != nil
			$log.debug("Exiting function: #{__method__}")
			return "?: Cannot initialize filterwheel with filter in beam"
		else
			cstr = "XQ #FILTRD;"
			$log.debug("about to execute FILTRD")
			r = sendgalil(cstr, mycn)
			if /OK:/.match(r) == nil 
				$log.debug("Exiting function: #{__method__}")
				return "?: error initializing filterwheel"
			else
				$log.debug("Exiting function: #{__method__}")
				return "OK: "
			end
		end
	end

	def filtrd(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		ta = Array.new
		ta[0] = mycn
		r = filtisin(ta)
		r = filtisin(ta)
		$log.debug("filtisin #{r}")
		if /1/.match(r) != nil
			$log.debug("Exiting function: #{__method__}")
			return "?: Cannot read filters with filter in beam"
		else
			cstr = "XQ #FILTRD;"
			$log.debug("about to execute FILTRD")
			r = sendgalil(cstr, mycn)
			if /OK:/.match(r) == nil 
				$log.debug("Exiting function: #{__method__}")
				return "?: error reading filters"
			else
				$log.debug("Exiting function: #{__method__}")
				return "OK: "
			end
		end
	end

	def showfilters(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		lf = Array.new
		lf[0] = "OK:"
		(0..5).each do |l|
			r = sendgalil("FILTVALS[#{l}]=?;", mycn)
			$log.debug("r #{r}")
			if /OK:/.match(r) == nil
				$log.debug("Error reading filter info from galil")
			else
				d = r.split(":")
				$log.debug("d[1] #{d[1]}")
				if $filters[d[1].to_i] == nil
					lf[l + 1] = "Unknown"
				else
					lf[l + 1] = $filters[d[1].to_i]
				end
				$log.debug("lf[#{l + 1}] #{lf[l + 1]}")
			end
		end
			fstr = lf.join(" ")
			$log.debug("Exiting function: #{__method__}")
			return fstr
	end

	def showfiltersandcodes(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		lf = Array.new
		lf[0] = "OK:"
		(0..5).each do |l|
			r = sendgalil("FILTVALS[#{l}]=?;", mycn)
			$log.debug("r #{r}")
			if /OK:/.match(r) == nil
				$log.error("Error reading filter info from galil")
			else
				d = r.split(":")
				$log.debug("d[1] #{d[1]}")
				if $filters[d[1].to_i] == nil
					lf[l + 1] = "Unknown"
				else
					lf[l + 1] = $filters[d[1].to_i]
				end
				$log.debug("lf[#{l + 1}] #{lf[l + 1]}")
			end
			lf[l + 1] = lf[l + 1] + ":" + $filthash[lf[l + 1]].to_s
		end
			fstr = lf.join(" ")
			$log.debug("Exiting function: #{__method__}")
			return fstr
	end
	
	def showloadedfilter(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		r = sendgalil("FILTVAL = ?;", mycn)
		if /OK:/.match(r) == nil
			$log.error("Error reading loaded filter from galil")
		else
			d = r.split(":")
			f = $filters[d[1].to_i]
			$log.debug("Exiting function: #{__method__}")
			return "OK: #{f}"
		end
	end	

	def loadfilter(c)
		$log.debug("Entering function: #{__method__}")
		fname = c[0]	
		if $filthash.has_key?(fname) == nil
			$log.debug("no such filter in master filterlist")
		else
			reqfilt = $filthash[fname].to_i
			$log.debug("requested filter magcode #{reqfilt}")
			r = checkloaded()
			if r
				filtout
				$log.debug("unloaded filter")
			end
			$log.debug("Exiting function: #{__method__}")
			return "OK: "
		end
	end	

def checkloaded()
end

def shownp(ca)
	$log.debug("Entering function: #{__method__}")
	mycn = ca[0]
	npfile = "/home/primefocus/90prime/galil/nominalplane.txt"
	if $npread == false
		npf = File.new(npfile, "r")
		if npf == nil
			$log.debug("Exiting function: #{__method__}")
			return "?: Cannot open nominal plane file"	
		else
			npf.each_line do |npl|
				$npla = npl.split("\t", 3)
			end
			$npread = true
		end
	end
	nprr = $npla.join(" ")
	$log.debug("Exiting function: #{__method__}")
	return "OK: #{nprr}"
end
	
		
		
	def showactvals(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		avals = Array.new
		avals[0] = "OK: "
		r = sendgalil("DISTA = ?;", mycn)
		if /OK:/.match(r) == nil
			$log.debug("Exiting function: #{__method__}")
			return "?: error reading actuator A"
		else
			d = r.split(":")
			avals[1] = d[1].to_i
		end	
		r = sendgalil("DISTB = ?;", mycn)
		if /OK:/.match(r) == nil
			$log.debug("Exiting function: #{__method__}")
			return "?: error reading actuator B"
		else
			d = r.split(":")
			avals[2] = d[1].to_i
		end	
		r = sendgalil("DISTC = ?;", mycn)
		if /OK:/.match(r) == nil
			$log.debug("Exiting function: #{__method__}")
			return "?: error reading actuator C"
		else
			d = r.split(":")
			avals[3] = d[1].to_i
		end	
		v = avals.join(" ")
		$log.debug("avals #{v}")
		$log.debug("Exiting function: #{__method__}")
		return(v)
	end

	def setactvals(c)
		$log.debug("Entering function: #{__method__}")
		av = c[0]
		bv = c[1]
		cv = c[2]
		mycn = c[3]
		r = "OK:"
		$log.debug("set a #{av} b #{bv} c #{cv}")
		r = sendgalil("DISTA=#{av};", mycn)
		if /OK:/.match(r) == nil
			$log.debug("Exiting function: #{__method__}")
			return "?: Error setting actuator A steps"
		end
		r = sendgalil("DISTB=#{bv};", mycn)
		if /OK:/.match(r) == nil
			$log.debug("Exiting function: #{__method__}")
			return "?: Error setting actuator B steps"
		end
		r = sendgalil("DISTC=#{cv};", mycn)
		if /OK:/.match(r) == nil
			$log.debug("Exiting function: #{__method__}")
			return "?: Error setting actuator C steps"
		end
		$log.debug("Exiting function: #{__method__}")
		return "OK: "
	end

	def setallactvals(c)
		$log.debug("Entering function: #{__method__}")
		allv = Array.new
		allv[0] = c[0]
		allv[1] = c[0]
		allv[2] = c[0]
		mycn = c[1]
		allv[3] = mycn
		setactvals(allv)
		r = sendgalil("DISTALL=#{c[0]};", mycn)
		if /OK:/.match(r) == nil
			$log.debug("Exiting function: #{__method__}")
			return "?: Error setting DISTALL steps"
		end
		$log.debug("Exiting function: #{__method__}")
		return "OK: "
	end

	def showalllvdtvals(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		 lvdtvals = Array.new
		 lvdtvals[0] = "OK: "
		ta = Array.new
		ta[0] = mycn
		 gst = getgalilstatus(ta)
		gst1 = gst[4, gst.length]
       	         v = $adbytes["a"] #98 bytes
       	         adb = gst1[v, 2]
       	         adba = adb.unpack("s")
       	         adbv = adba[0] * $adconv
       	         lvdtvals[1]  = adbv.to_s[0,5]
       	         v = $adbytes["b"]
       	         adb = gst1[v, 2]
       	         adba = adb.unpack("s")
       	         adbv = adba[0] * $adconv
       	         lvdtvals[2] = adbv.to_s[0,5]
       	         v = $adbytes["c"]
       	         adb = gst1[v, 2]
       	         adba = adb.unpack("s")
       	         adbv = adba[0] * $adconv
       	         lvdtvals[3] = adbv.to_s[0,5]
               	lvs = lvdtvals.join(" ")
		$log.debug("lvs #{lvs}")
		$log.debug("Exiting function: #{__method__}")
		return lvs
	end

	def setgfocus(c)
		$log.debug("Entering function: #{__method__}")
		guidersteps = c[0]
		mycn = c[1]
		r = sendgalil("DISTGCAM=#{guidersteps};", @myclientnum)
		if /OK/.match(r) == nil
			$log.debug("Exiting function: #{__method__}")
			return("?: Error setting guider focus steps")
		else
			$log.debug("Exiting function: #{__method__}")
			return("OK: ")
		end
	end

	def initgcam(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		cmd = "XQ #GFWINIT;"
		r = sendgalil(cmd, mycn)
		$log.debug("Exiting function: #{__method__}")
		return r
	end

	def focusgcam(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		cmd = "XQ #FOCGCAM;"
		r = sendgalil(cmd, mycn)
		$log.debug("Exiting function: #{__method__}")
		return r
	end

	def setgfiltnum(ca)
		$log.debug("Entering function: #{__method__}")
		gfiltnum = ca[0]
		mycn = ca[1]
		r = sendgalil("GFILTN=#{gfiltnum};", mycn)
		if /OK/.match(r) == nil
			$log.debug("Exiting function: #{__method__}")
			return "?: Error setting guider filter number"
		else
			$log.debug("Exiting function: #{__method__}")
			return("OK: ")
		end
	end

	def getgfilter(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		r = sendgalil("MG GFILTN;", mycn)
		if /OK/.match(r) == nil
			$log.debug("Exiting function: #{__method__}")
			return("?: Error getting guider filter number")
		else
			d = r.split(":")
			gfn = d[1].to_i
			$log.debug("in getgfilter for client #mycn}")
			$log.debug("Exiting function: #{__method__}")
			return "OK: #{gfn}"
		end
	end
			  

	def gfwmov(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		c = "XQ #GFWMOV;"
		r = sendgalil(c, mycn)
		$log.debug("in gfwmov for client #{mycn}")
		$log.debug("Exiting function: #{__method__}")
		return r
	end


	def clientdone(ca)
		$log.debug("Entering function: #{__method__}")
		mycn = ca[0]
		$log.debug("in clientdone for client #{mycn}")
		$log.debug("Exiting function: #{__method__}")
		return "OK: Client #{mycn} Shutting Down"
	end
		
		
end
#
#
#signal handler for SIGCLD to clean up when children exit
trap("SIGCLD") do
pid = Process.wait
	$log.debug("child process pid #{pid} exited")
end
#End class definitions
#Start program

#g =  Galil.new("bok", "90P", "./realcmds.list", 9875, "bokgmc.as.arizona.edu", 9876)
# tstr="\033]0;Galilserver\007"
# $stdout.write(tstr)
# $stdout.flush
g =  Galil.new("", "90prime", "/home/primefocus/90prime/galil/cmds.list", 9874, "10.30.3.31", 9876)
$stathash = Hash.new
$filthash = Hash.new
$filthash["Unknown"] = 256
filtfile = File.new("/home/primefocus/90prime/galil/filters.txt", "r")
$filters = Array.new
$i = 1
filtfile.each_line do |l|
        next if l.match('#')
	l.chomp!
        ff = Filter.new(l)
        fk = ff.filtmagcode.to_i
        sn = ff.filtshortname
        fc = ff.filtcolor
        $filters[fk] = sn
        #$log.debug("filter mag code #{fk} shortname #{sn} color #{fc}")
	$filthash[sn] = fk
	$i = $i + 1
end
#make sure we have a lock file
if test(?e, $lockfile) == false
	$log.debug("Need to create lockfile #{$lockfile}")
	lf = File.new($lockfile, File::CREAT|File::TRUNC|File::RDWR, 0644)
else
	$log.debug("Found lockfile #{$lockfile}")
end

#g.showcmds
g.checkgalilstate(myclientnum)
g.runserver
g.shutdown
